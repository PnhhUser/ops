import { DataSource } from 'typeorm';
import { RoleEntity } from '../entities/role.entity';
import { RoleType, UserRole } from '../../common/constants/enums/role.enum';

export async function seedRoles(dataSource: DataSource) {
  const roleRepo = dataSource.getRepository(RoleEntity);
  const queryRunner = dataSource.createQueryRunner();

  try {
    await queryRunner.connect();
    await queryRunner.startTransaction();

    // 1. Ki·ªÉm tra d·ªØ li·ªáu hi·ªán c√≥
    const existingRoles = await roleRepo.find();
    if (existingRoles.length === 0) {
      console.log('üîÅ No existing roles to clear');
    } else {
      console.log(`üóëÔ∏è Found ${existingRoles.length} roles to clear`);
    }

    // 2. X·ª≠ l√Ω r√†ng bu·ªôc kh√≥a ngo·∫°i theo th·ª© t·ª±
    // T·∫Øt ki·ªÉm tra kh√≥a ngo·∫°i t·∫°m th·ªùi
    await queryRunner.query('SET FOREIGN_KEY_CHECKS = 0');

    // X√≥a d·ªØ li·ªáu t·ª´ b·∫£ng con tr∆∞·ªõc
    await queryRunner.query('DELETE FROM role_permissions_mapping');

    // Sau ƒë√≥ x√≥a d·ªØ li·ªáu t·ª´ b·∫£ng ch√≠nh
    await queryRunner.query('DELETE FROM roles');

    // Reset auto-increment (t∆∞∆°ng ƒë∆∞∆°ng TRUNCATE)
    await queryRunner.query('ALTER TABLE roles AUTO_INCREMENT = 1');

    // B·∫≠t l·∫°i ki·ªÉm tra kh√≥a ngo·∫°i
    await queryRunner.query('SET FOREIGN_KEY_CHECKS = 1');

    // 3. Seed d·ªØ li·ªáu m·ªõi
    const systemRoles = [
      {
        key: UserRole.ADMIN,
        name: 'Qu·∫£n tr·ªã h·ªá th·ªëng',
        description: 'To√†n quy·ªÅn truy c·∫≠p v√† ch·ªânh s·ª≠a',
        type: RoleType.SYSTEM,
      },
      {
        key: UserRole.USER,
        name: 'Ng∆∞·ªùi d√πng',
        description: 'Truy c·∫≠p th√¥ng th∆∞·ªùng',
        type: RoleType.SYSTEM,
      },
    ];

    await roleRepo.save(systemRoles);
    await queryRunner.commitTransaction();
    console.log('‚úÖ Successfully seeded roles');
  } catch (error) {
    await queryRunner.rollbackTransaction();
    console.error('‚ùå Role seeding failed:', error);
    throw new Error(`Failed to seed roles: ${error}`);
  } finally {
    await queryRunner.release();
  }
}
